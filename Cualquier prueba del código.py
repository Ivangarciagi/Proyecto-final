import matplotlib.pyplot as plt
import numpy as np
import random
import tkinter as tk
from scipy.stats import weibull_min
import tkinter as tk
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
from matplotlib.ticker import FormatStrFormatter
# Número de simulaciones
# Lista para almacenar los valores de la variable aleatoria

I1 = []
I2 = []
I3 = []
I4 = []
simulaciones= 1000
# Indicar que las variables son globales
Ancho_Impacto = 311
Longitud_línea = 1000
Longitud_vano1 = 400
Longitud_vano2 = 200
Longitud_vano3 = 208.87
Longitud_vano4 = 191.13
Ancho_ImpactoLinea=Ancho_Impacto*0.5
Impacto=0
Impacto_torre1=0
Impacto_torre2=0
Impacto_torre3=0
Impacto_torre4=0
cont=0
for i in range(simulaciones):
    cont=cont+1
    print(cont)
    probabilidad_de_ocurrencia = random.uniform(0.003, 0.99)
    I_probabilidad = ((((1/probabilidad_de_ocurrencia)-1)) ** (2/5)) * 20
    S_aleatorio=8*( I_probabilidad)**(0.65)
    #5 Definición aleatoria de x,y y de distancia de la línea de transmisión:
    x = random.randint(0, Longitud_línea)
    y = random.randint(0, Ancho_Impacto)
    #6  Verificación de que la descarga entre o no al c. de guarda:  El criterio para definir si 
    #una descarga impacta sobre el cable de guarda es:S ≥ Dis
    RAIZ=float((Ancho_ImpactoLinea-y)**(2))
    DIS=RAIZ**(1/2)
    DIS = float(DIS)
    if not S_aleatorio>=DIS:
        # código a ejecutar si la condición es falsa
        plt.scatter(x, y,label='Descargas atmosféricas', s=5, alpha=0.3, color='blue')
    else:
        # código a ejecutar si la condición es verdadera
        plt.scatter(x, Ancho_ImpactoLinea,label='Descargas atmosféricas', s=2, alpha=0.3, color='blue')
        Impacto=Impacto+1
        D1=(Longitud_línea - Longitud_vano1)
        D2=D1 - (Longitud_vano2)
        D3=D2 - (Longitud_vano3)
        D4=D3-(Longitud_vano4)
        if D1 <= x <= Longitud_línea:
            I1.append(round( I_probabilidad))
            Impacto_torre1 = Impacto_torre1+1
        if D2 <= x < D1:
            I2.append(round( I_probabilidad))
            Impacto_torre2 = Impacto_torre2+1
        if D3 <= x < D2:
            I3.append(round( I_probabilidad))
            Impacto_torre3 = Impacto_torre3+1
        if x < D3:
            I4.append(round( I_probabilidad))
            Impacto_torre4 = Impacto_torre4+1
    #Prueba para los valores de longitud



I_valor_variable_aleatoria=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 
76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201]
Tension_global1= [34755.826, 68097.7998, 98784.7026, 125910.858, 149025.808, 169199.123, 192309.417, 212937.727, 231052.775, 246723.547, 260086.436, 271311.531, 280595.531, 288135.912, 294129.829, 298762.503, 307821.559, 316885.368, 324754.849, 331516.997, 337270.092, 342103.055, 346091.678, 349766.659, 363151.291, 376421.157, 389593.054, 402670.928, 415657.667, 427838.628, 440715.314, 453607.51, 466555.926, 479670.777, 494774.251, 508396.248, 521285.396, 534116.502, 546893.508, 559625.587, 572311.285, 584954.119, 597563.054, 610130.144, 622669.687, 635173.131, 647648.856, 660252.411, 672966.964, 685645.853, 698295.79, 710918.818, 724857.516, 738462.736, 752065.75, 766192.713, 779787.711, 793380.936, 806971.991, 820560.882, 833861.284, 847428.472, 860994.052, 874557.99, 888120.759, 901681.303, 915240.596, 926864.998, 930743.31, 935589.966, 938541.266, 941442.39, 944022.017, 946354.168, 947361.414, 946803.88, 946619.562, 947289.314, 948709.646, 950223.84, 951766.366, 953361.917, 954514.393, 954720.99, 954751.83, 954599.206, 954602.612, 954902.656, 955934.906, 957026.611, 958218.911, 959788.014, 961345.375, 962827.092, 964076.121, 965059.845, 965933.426, 966786.422, 967813.233, 968871.39, 969984.135, 971047.893, 972074.952, 973139.231, 974221.9, 975314.65, 976396.6, 977378.217, 978575.375, 979733.966, 980947.189, 982156.815, 983289.289, 984371.154, 985452.843, 986525.885, 987593.456, 988662.526, 989733.603, 990801.338, 991873.166, 992940.65, 994006.507, 995065.906, 996166.706, 997263.573, 998367.505, 999484.768, 1000582.0, 1001674.0, 1002768.0, 1003860.0, 1004951.0, 1006048.0, 1007136.0, 1008228.0, 1009345.0, 1010432.0, 1011522.0, 1012615.0, 1013708.0, 1014800.0, 1015891.0, 1016981.0, 1018071.0, 1019160.0, 1020248.0, 1021335.0, 1022422.0, 1023509.0, 1024595.0, 1025681.0, 1026765.0, 1027848.0, 1028939.0, 1030055.0, 1031170.0, 1032285.0, 1033351.0, 1034465.0, 1035550.0, 1036669.0, 1037787.0, 1038905.0, 1040022.0, 1041157.0, 1042273.0, 1043390.0, 1044505.0, 1045620.0, 1046774.0, 1047893.0, 1049001.0, 1050109.0, 1051217.0, 1052325.0, 1053427.0, 1054534.0, 1055641.0, 1056748.0, 1057855.0, 1058961.0, 1060067.0, 1061172.0, 1062277.0, 1063382.0, 1064487.0, 1065591.0, 1066695.0, 1067800.0, 1068906.0, 1070008.0, 1071112.0, 1072213.0, 1073314.0, 1074414.0, 1075515.0, 1076616.0, 1077726.0, 1077726.0]
Tension_global2=[19046.1979, 32774.9598, 48538.6142, 63227.8468, 76736.8909, 90013.1892, 122383.386, 152727.35, 166148.29, 155327.144, 168126.74, 180102.608, 205997.965, 217293.828, 223606.947, 233128.316, 241762.9, 250292.85, 261916.768, 282364.663, 300947.028, 315905.64, 331964.124, 341006.134, 354456.681, 367837.166, 381764.143, 395905.278, 410043.119, 424111.953, 438547.951, 452502.371, 466557.178, 480677.099, 494591.578, 509264.927, 523386.214, 537506.043, 551624.572, 565742.048, 579858.483, 593973.974, 608088.72, 622202.555, 636315.766, 650428.153, 664539.864, 678650.918, 692761.322, 706870.951, 720979.923, 735088.225, 748491.474, 762601.791, 776711.354, 789651.082, 803767.554, 817883.122, 831997.787, 846111.474, 861864.173, 875982.064, 890098.277, 904212.778, 918325.613, 927593.946, 930940.844, 935836.466, 937639.224, 939870.549, 942382.596, 944944.196, 947197.503, 948565.38, 948808.881, 951108.795, 953174.346, 954504.249, 955602.23, 955695.93, 955452.554, 955065.877, 955108.237, 955663.128, 957155.379, 958866.09, 960592.93, 962184.091, 963527.372, 964645.489, 965597.168, 966391.192, 
967130.068, 967803.223, 968426.986, 969019.78, 969847.648, 970590.358, 971393.147, 972227.418, 974174.945, 975357.127, 976476.767, 977638.159, 978846.542, 980099.29, 981370.637, 980444.893, 981597.924, 982786.618, 983973.529, 985161.169, 986344.714, 987532.861, 988738.202, 989926.374, 991099.484, 992268.946, 993435.246, 994600.938, 995744.321, 996913.487, 998085.901, 999247.446, 1000395.0, 1001559.0, 1002731.0, 1003896.0, 1005055.0, 1006200.0, 1007354.0, 1008505.0, 1009652.0, 1010869.0, 1012026.0, 1013192.0, 1014351.0, 1015510.0, 1016672.0, 1017843.0, 1019012.0, 1020171.0, 1021310.0, 1022447.0, 1023581.0, 1024711.0, 1025837.0, 1026959.0, 1028081.0, 1029199.0, 1030311.0, 1031415.0, 1032505.0, 1034586.0, 1035652.0, 1036706.0, 1037724.0, 1038738.0, 1040128.0, 1041134.0, 1042135.0, 1043136.0, 1044135.0, 1045129.0, 1046122.0, 1047115.0, 1048106.0, 1049095.0, 1050084.0, 1051071.0, 1051313.0, 1052349.0, 
1053386.0, 1054422.0, 1055457.0, 1056491.0, 1057513.0, 1058545.0, 1059579.0, 1060610.0, 1061642.0, 1062673.0, 1063701.0, 1064735.0, 1065771.0, 1066807.0, 1067841.0, 1068875.0, 1069908.0, 1070949.0, 1071996.0, 1073024.0, 1074034.0, 1075058.0, 1076075.0, 1077100.0, 1078135.0, 1079169.0, 1080193.0, 1080193.0]
Tension_global3=[5720.41194, 45767.1309, 2874.83126, 3678.17507, 4357.40766, 4904.15347, 25506.4846, 39100.8139, 21815.4696, 81624.6146, 93443.9719, 85648.9541, 71506.0262, 91069.2618, 109357.997, 92211.7493, 93749.382, 99126.4252, 104485.824, 109827.913, 115153.191, 120462.026, 125754.617, 131030.815, 136292.401, 141537.8, 146768.817, 151985.135, 157186.285, 162373.386, 167943.254, 173009.725, 178114.771, 181859.222, 186949.002, 192077.325, 197166.227, 202078.65, 207798.041, 212850.487, 217889.052, 222913.772, 227925.953, 232923.141, 237907.958, 242877.801, 247834.031, 252977.147, 257905.776, 262756.379, 267655.942, 272542.179, 277413.477, 282273.102, 287022.43, 291853.456, 296669.636, 301472.886, 306261.368, 311035.082, 315794.032, 
320534.68, 325266.412, 329983.523, 334688.303, 339376.305, 344052.141, 349178.032, 353826.088, 358459.725, 361825.761, 366436.257, 371032.583, 375614.801, 380182.977, 384737.181, 388601.204, 393104.29, 397621.384, 402124.782, 406611.641, 411084.871, 415544.562, 419990.809, 424423.708, 428843.359, 433246.615, 437636.722, 442013.785, 446480.258, 450827.394, 455161.721, 459590.248, 464082.117, 468373.358, 472652.167, 476972.902, 481223.172, 485461.27, 489565.356, 493779.935, 497974.533, 502161.388, 506332.391, 510491.765, 514635.33, 518767.418, 522883.745, 526988.75, 531082.568, 535160.754, 539753.17, 543802.863, 547841.707, 551865.003, 555574.095, 559572.746, 563560.859, 567538.574, 571500.95, 575447.966, 579384.787, 584039.948, 587948.453, 589073.885, 592970.722, 596852.387, 600724.207, 604580.923, 608422.514, 612259.989, 616076.952, 619884.466, 623676.998, 627460.267, 631234.42, 634987.908, 638732.357, 642467.913, 646188.712, 649894.738, 653579.969, 657262.627, 660930.574, 664590.089, 668241.32, 671871.616, 675625.517, 679238.959, 682831.359, 686396.085, 689972.822, 693535.166, 697083.106, 700623.481, 704149.538, 707661.265, 711427.132, 714916.021, 718397.811, 721844.107, 725297.604, 728744.247, 732169.453, 735587.895, 739537.393, 742933.102, 746314.821, 749682.542, 753036.257, 756383.75, 760537.479, 763783.713, 767094.64, 770391.752, 773675.045, 776952.678, 780208.371, 783466.778, 786703.236, 789901.221, 793118.841, 796322.828, 797076.061, 800270.798, 803451.978, 806619.598, 809782.248, 812931.444, 816067.183, 819198.22, 822315.907, 825420.242, 828511.225, 831588.855, 834662.161, 837722.222, 840778.177, 843811.805, 843811.805]
Tension_global4=[3503.70571, 18143.9459, 40794.7446, 56806.1036, 79076.7893, 93274.1855, 104004.836, 133939.393, 139804.653, 166024.487, 181705.24, 197189.444, 212494.826, 227639.422, 242641.319, 257517.564, 272283.87, 287071.332, 302300.23, 317423.79, 332451.102, 347390.524, 362249.29, 376887.169, 391612.923, 408802.11, 423357.132, 437877.541, 452344.342, 467052.992, 481454.358, 495913.832, 510089.844, 524421.273, 539112.067, 553708.723, 568274.285, 582808.416, 597313.753, 611796.21, 626241.589, 640678.448, 655089.315, 669488.577, 683875.215, 698345.549, 
712916.092, 727465.336, 741994.808, 756503.101, 770994.345, 785469.838, 799927.825, 814372.36, 828801.491, 843378.228, 858322.137, 873249.853, 888160.867, 903055.214, 917932.963, 928566.757, 930698.439, 933108.534, 933971.507, 935015.396, 935639.576, 936214.93, 937657.594, 938955.97, 939909.274, 940655.18, 941949.387, 943138.3, 943810.606, 944624.838, 945457.339, 946288.025, 947180.627, 947969.223, 949180.784, 950488.232, 951450.649, 952503.373, 953815.422, 955067.678, 956333.39, 957584.941, 958785.513, 959897.159, 960975.707, 961968.737, 962951.304, 963915.369, 964856.847, 965804.862, 966801.086, 967813.694, 968840.582, 969867.312, 970898.963, 971949.214, 973007.39, 974068.98, 975132.335, 976197.845, 977263.86, 978327.2, 979382.794, 980433.038, 981483.428, 982527.237, 983562.603, 984591.668, 985612.021, 986628.133, 987642.725, 988650.95, 989654.978, 990654.495, 991683.206, 992630.145, 993623.528, 994613.834, 995605.251, 996590.308, 997587.696, 998558.856, 999528.692, 1000498.0, 1001468.0, 1002438.0, 1003475.0, 1004446.0, 1005443.0, 1006409.0, 1007383.0, 1008359.0, 1009336.0, 1010315.0, 1011295.0, 1012277.0, 1013260.0, 1014244.0, 1015231.0, 1016219.0, 1017209.0, 1018211.0, 1019218.0, 1020224.0, 1021234.0, 1022243.0, 1023255.0, 1024268.0, 1025283.0, 1026295.0, 1027315.0, 1028337.0, 1029361.0, 1030387.0, 1031415.0, 1032444.0, 1033476.0, 1034518.0, 1035563.0, 1036609.0, 1037652.0, 1038701.0, 1039752.0, 1040803.0, 1041856.0, 1042909.0, 
1043963.0, 1045018.0, 1046072.0, 1047130.0, 1048196.0, 1049262.0, 1050329.0, 1051397.0, 1052464.0, 1053531.0, 1054599.0, 1055667.0, 1056734.0, 1057801.0, 1058868.0, 1059935.0, 1061001.0, 1062067.0, 1063085.0, 1064151.0, 1065217.0, 1066291.0, 1067365.0, 1068438.0, 1069511.0, 1070596.0, 1071667.0, 1071667.0]
PV = []
Pt = []

PV1 = []
PV2 = []
PV3 = []
PV4 = []

print(len(Tension_global1))
print(len(Tension_global2))
print(len(Tension_global3))
print(len(Tension_global4))
def ejecutar_histograma():
    # Copia y pega aquí el código que proporcionaste
    for i in I1:
        if i in I_valor_variable_aleatoria:
            index = I_valor_variable_aleatoria.index(i)
            index2 = I1.index(i)
        if index < len(Tension_global1):
            PV1.append(Tension_global1[index])
    for i in I2:
        if i in I_valor_variable_aleatoria:
            index = I_valor_variable_aleatoria.index(i)
            index2 = I2.index(i)
        if index < len(Tension_global2):
            PV2.append(Tension_global2[index])

    for i in I3:
        if i in I_valor_variable_aleatoria:
            index = I_valor_variable_aleatoria.index(i)
            index2 = I3.index(i)
        if index < len(Tension_global3):
            PV3.append(Tension_global3[index])

    for i in I4:
        if i in I_valor_variable_aleatoria:
            index = I_valor_variable_aleatoria.index(i)
            index2 = I4.index(i)
        if index < len(Tension_global4):
            PV4.append(Tension_global4[index])

    PV=PV1+PV2+PV3+PV4
    print(PV)
    PV_sin_ceros = [x for x in PV if x != 0]
    # Calcular el histograma
    n, bins, patches = plt.hist(PV_sin_ceros, range=(min(PV_sin_ceros), max(PV_sin_ceros)), edgecolor='black', color='navy', alpha=0.8, linewidth=1.5, zorder=2)

    # Calcular los valores medios de los bins
    bin_centers = 0.5 * (bins[:-1] + bins[1:])
    
    # Crear una figura de Matplotlib
    fig = plt.Figure(figsize=(15, 10), dpi=100)
    # Agregar un subplot a la figura
    ax = fig.add_subplot(1, 1, 1)

    # Crear la gráfica
    ax.bar(bin_centers, n, align='center', alpha=0.75, edgecolor='black', width=bins[1]-bins[0])


    # Etiquetar los ejes y el título del gráfico
    ax.set_title('Histograma de Sobretensiones', fontsize=14, fontweight='bold')
    ax.set_xlabel('Sobretensión [kV]', fontsize=12, fontweight='bold')
    ax.set_ylabel('Número de veces', fontsize=12, fontweight='bold')

    # Crear la gráfica
    ax.bar(bin_centers, n, align='center', alpha=0.75, edgecolor='black', width=bins[1]-bins[0])

    # Agregar marcas de posición en el eje x y etiquetas de texto
    ax.set_xticks(bin_centers)
    ax.set_xticklabels([f"{x:.2f}" for x in bin_centers])

    # Crear un objeto de lienzo de tkinter para la figura
    canvas = FigureCanvasTkAgg(fig, master=root)
    canvas.draw()
    canvas.get_tk_widget().pack()

    # Mostrar la ventana de tkinter
    tk.mainloop()
# Crear la ventana principal
root = tk.Tk()
root.geometry('1400x1000')
root.title('Ventana con botón')

# Crear el botón y asociarle la función ejecutar_histograma
boton = tk.Button(root, text='Ejecutar histograma', command=ejecutar_histograma)
boton.pack(padx=20, pady=20)
# Ejecutar el bucle principal de la ventana
root.mainloop()